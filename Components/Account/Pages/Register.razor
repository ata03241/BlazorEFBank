@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BlazorEFIdentity.Data
@using BlazorEFIdentity.Model

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ApplicationDbContext DbContext

<PageTitle>Register</PageTitle>



<div class="row justify-content-center">
    <div class="col-md-4" style="margin-top: 1%;">
        <div class="card shadow-lg p-4">
            <StatusMessage Message="@Message" />
            <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                <DataAnnotationsValidator />
                <h3 class="text-center mb-4 fw-bold text-primary">Create a new account.</h3>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.FirstName" class="form-control" autocomplete="firstname" aria-required="true" placeholder="FirstName" />
                    <label for="firstname">First Name</label>
                    <ValidationMessage For="() => Input.FirstName" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.LastName" class="form-control" autocomplete="lastname" aria-required="true" placeholder="LastName" />
                    <label for="lastname">Last Name</label>
                    <ValidationMessage For="() => Input.LastName" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Address" class="form-control" autocomplete="address" aria-required="true" placeholder="Address" />
                    <label for="address">Address</label>
                    <ValidationMessage For="() => Input.Address" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.PhoneNumber" class="form-control" autocomplete="phonenumber" aria-required="true" placeholder="PhoneNumber" />
                    <label for="phonenumber">PhoneNumber</label>
                    <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Personnummer" class="form-control" autocomplete="personnummer" aria-required="true" placeholder="Personnummer" />
                    <label for="personnummer">Personnummer</label>
                    <ValidationMessage For="() => Input.Personnummer" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="email">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Handle" class="form-control" autocomplete="handle" aria-required="true" placeholder="Handle" />
                    <label for="handle">Handle</label>
                    <ValidationMessage For="() => Input.Handle" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                    <label for="password">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                    <label for="confirm-password">Confirm Password</label>
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                </div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
            </EditForm>
        </div>
    </div>
    @* <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to register.</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div> *@
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();
        user.FirstName = Input.FirstName;
        user.LastName = Input.LastName;
        user.Address = Input.Address;


        if (Input.Email is not null)
        {
            var existingUser = await UserManager.FindByEmailAsync(Input.Email);
            if (existingUser != null)
            {
                identityErrors = new[]
                {
                    new IdentityError { Description = "Email is already taken." }
                };
                return;
            }
        }


        if(Input.Handle is not null)
        {
            user.Handle = Input.Handle;

            var existingUser = UserManager.Users
            .Any(u => u.Handle != null && u.Handle == user.Handle);

            if(existingUser)
            {
                identityErrors = new[]
                {
                    new IdentityError { Description = "Handle is already taken"}
                };
                return;
            }
        }  

        if(Input.PhoneNumber is not null)
        {
            user.PhoneNumber = Input.PhoneNumber;

            var existingUser = UserManager.Users
            .Any(u => u.PhoneNumber != null && u.PhoneNumber == user.PhoneNumber);

            if(existingUser)
            {
                identityErrors = new[]
                {
                    new IdentityError { Description = "PhoneNumber is already in the system"}
                };
                return;
            }
        }
        if(Input.Personnummer is not null)
        {
            user.Personnummer = Input.Personnummer;

            var existingUser = UserManager.Users
            .Any(u => u.Personnummer != null && u.Personnummer == user.Personnummer);

            if(existingUser)
            {
                identityErrors = new[]
                {
                    new IdentityError { Description = "Personnummer is already in the system"}
                };
                return;
            }
        }

     

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }
        //to create account number
        var newaccount = new Account
            {
                AccountNumber = GenerateaccountNumber(),
                Name = user.FirstName + " " + user.LastName,
                Balance = 0,
                AccountType = "Main Account",
                IsActive = true,
                CardNumber = GenerateCardNumber(),
                UserId = user.Id,
                Transactions = new List<Transaction>()

            };

        DbContext.Accounts.Add(newaccount);
        await DbContext.SaveChangesAsync();

        await UserManager.AddToRoleAsync(user, "User");

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private string GenerateaccountNumber()
    {
        Random random = new Random();
        string accountNumber = "";
        for (int i = 0; i < 10; i++)
        {
            accountNumber += random.Next(0, 10).ToString();
        }
        return accountNumber;
    }

    private string GenerateCardNumber()
    {
        Random random = new Random();
        string cardNumber = "";
        for (int i = 0; i < 16; i++)
        {
            cardNumber += random.Next(0, 10).ToString();
        }
        return cardNumber;
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "First name is required.")]
        [Display(Name = "FirstName")]
        public string FirstName { get; set; } = "";

        [Required(ErrorMessage = "Last name is required.")]
        [Display(Name = "LastName")]
        public string LastName { get; set; } = "";

        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address.")]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Handle is required.")]
        [Display(Name = "Handle")]
        public string Handle { get; set; } = "";

        [Required(ErrorMessage = "Address is required.")]
        [Display(Name = "Address")]
        public string Address { get; set; } = "";

        [Required(ErrorMessage = "Phone number is required.")]
        [StringLength(10, ErrorMessage = "Phone number must be exactly 10 digits.")]
        [RegularExpression(@"^\d{10}$", ErrorMessage = "Phone number must contain only digits.")]
        public string PhoneNumber { get; set; } = ""; 

        [Required(ErrorMessage = "Personnummer is required.")]
        [StringLength(12, ErrorMessage = "Personnummer must be exactly 12 characters.")]
        [RegularExpression(@"^\d{12}$", ErrorMessage = "Personnummer must contain exactly 12 digits.")]
        public string Personnummer { get; set; } = "";

        [Required(ErrorMessage = "Password is required.")]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

    }
}
