@page "/Account/Manage/Email"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BlazorEFIdentity.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager

<PageTitle>Manage email</PageTitle>

<h3 class="text-center mb-4 fw-bold text-primary">Manage Emai</h3>


<StatusMessage Message="@message" />

<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card shadow-lg p-4">
            <form @onsubmit="OnSendEmailVerificationAsync" id="send-verification-form" method="post">
                <AntiforgeryToken />
            </form>

            <EditForm Model="Input" FormName="change-email" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />

                @if (isEmailConfirmed)
                {
                    <div class="form-floating mb-3 input-group">
                        <input type="text" value="@email" class="form-control" placeholder="Your email" disabled />
                        <div class="input-group-append">
                            <span class="input-group-text bg-success text-white">
                                <i class="bi bi-check-circle-fill"></i>
                            </span>
                        </div>
                        <label for="email" class="form-label">Email</label>
                    </div>
                }
                else
                {
                    <div class="form-floating mb-3 position-relative">
                        <input type="text" value="@email" class="form-control" placeholder="Your email" disabled />
                        <label for="email" class="form-label">
                            <i class="bi bi-envelope-fill me-2"></i>Email
                        </label>
                        <button type="submit" class="btn btn-link position-absolute end-0 top-50 translate-middle-y me-3 text-primary fw-bold" form="send-verification-form">
                            <i class="bi bi-send"></i> Send verification
                        </button>
                    </div>
                }

                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.NewEmail" class="form-control" autocomplete="email" aria-required="true" placeholder="Please enter new email." />
                    <label for="new-email" class="form-label">
                        <i class="bi bi-pencil-square me-2"></i>New email
                    </label>
                    <ValidationMessage For="() => Input.NewEmail" class="text-danger mt-1" />
                </div>

                <button type="submit" class="w-100 btn btn-lg btn-primary shadow-sm" style="transition: 0.3s;">
                    <i class="bi bi-envelope-check me-2"></i> Change email
                </button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private string? email;
    private bool isEmailConfirmed;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        email = await UserManager.GetEmailAsync(user);
        isEmailConfirmed = await UserManager.IsEmailConfirmedAsync(user);

        Input.NewEmail ??= email;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.NewEmail is null || Input.NewEmail == email)
        {
            message = "Your email is unchanged.";
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateChangeEmailTokenAsync(user, Input.NewEmail);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmailChange").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["email"] = Input.NewEmail, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, Input.NewEmail, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Confirmation link to change email sent. Please check your email.";
    }

    private async Task OnSendEmailVerificationAsync()
    {
        if (email is null)
        {
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, email, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Verification email sent. Please check your email.";
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "New email")]
        public string? NewEmail { get; set; }
    }
}
