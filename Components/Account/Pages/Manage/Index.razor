@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using BlazorEFIdentity.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Profile</PageTitle>

<StatusMessage />

<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card shadow-lg p-4">
            <h3 class="text-center mb-4 fw-bold text-primary">Edit Profile</h3>

            <EditForm Model="Input" FormName="profileForm" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />

               
                <div class="form-floating mb-3">
                    <input type="text" value="@username" class="form-control" placeholder="Username" disabled />
                    <label class="form-label"><i class="bi bi-person-circle me-2"></i>Username</label>
                </div>

                <!-- First Name -->
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.FirstName" class="form-control" placeholder="Enter first name" />
                    <label><i class="bi bi-person me-2"></i>First Name</label>
                    <ValidationMessage For="() => Input.FirstName" class="text-danger mt-1" />
                </div>

                <!-- Last Name -->
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.LastName" class="form-control" placeholder="Enter last name" />
                    <label><i class="bi bi-person me-2"></i>Last Name</label>
                    <ValidationMessage For="() => Input.LastName" class="text-danger mt-1" />
                </div>

                <!-- Phone Number -->
                <div class="form-floating mb-3 position-relative">
                    <InputText @bind-Value="Input.PhoneNumber" class="form-control pe-5" placeholder="Enter phone number" />
                    <label><i class="bi bi-telephone me-2"></i>Phone Number</label>
                    <span class="position-absolute end-0 top-50 translate-middle-y me-3 text-muted">
                        <i class="bi bi-phone"></i>
                    </span>
                    <ValidationMessage For="() => Input.PhoneNumber" class="text-danger mt-1" />
                </div>

                <!-- Address -->
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Address" class="form-control" placeholder="Enter address" />
                    <label><i class="bi bi-house-door me-2"></i>Address</label>
                    <ValidationMessage For="() => Input.Address" class="text-danger mt-1" />
                </div>

                <!-- Personnummer -->
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Personnummer" class="form-control" placeholder="Enter personnummer" />
                    <label><i class="bi bi-card-text me-2"></i>Personnummer</label>
                    <ValidationMessage For="() => Input.Personnummer" class="text-danger mt-1" />
                </div>

                <button type="submit" class="w-100 btn btn-lg btn-primary shadow-sm" style="transition: 0.3s;">
                    <i class="bi bi-save me-2"></i>Save
                </button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? phoneNumber;
    private bool isUpdated = false;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
      
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        
        username = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);

      
        Input.FirstName = user.FirstName;
        Input.LastName = user.LastName;
        Input.PhoneNumber ??= phoneNumber;
        Input.Address = user.Address;
        Input.Personnummer = user.Personnummer;
    }

    private async Task OnValidSubmitAsync()
    {
        bool isProfileUpdated = false;

        
        if (Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
                return;
            }
            isProfileUpdated = true;
        }

        
        if (Input.FirstName != user.FirstName ||
            Input.LastName != user.LastName ||
            Input.Address != user.Address ||
            Input.Personnummer != user.Personnummer)
        {
            user.FirstName = Input.FirstName;
            user.LastName = Input.LastName;
            user.Address = Input.Address;
            user.Personnummer = Input.Personnummer;

            var updateResult = await UserManager.UpdateAsync(user);
            if (!updateResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to update profile.", HttpContext);
                return;
            }
            isProfileUpdated = true;
        }

       
        if (isProfileUpdated)
        {
            await SignInManager.RefreshSignInAsync(user);
            isUpdated = true; 
        }
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(50, MinimumLength = 2)]
        [Display(Name = "First Name")]
        public string? FirstName { get; set; }

        [Required]
        [StringLength(50, MinimumLength = 2)]
        [Display(Name = "Last Name")]
        public string? LastName { get; set; }

        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }

        [StringLength(100)]
        [Display(Name = "Address")]
        public string? Address { get; set; }

        [Required]
        [StringLength(12, MinimumLength = 10)]
        [Display(Name = "Personnummer")]
        public string? Personnummer { get; set; }
    }
}
