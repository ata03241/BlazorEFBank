@page "/Account/Manage/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using BlazorEFIdentity.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger

<PageTitle>Change password</PageTitle>

<h3 class="text-center mb-4 fw-bold text-primary">Change Password</h3>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @(message.StartsWith("Error") ? "alert-danger" : "alert-success") text-center">
        @message
    </div>
}

<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card shadow-lg border-0 rounded-4 p-4">
            <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />

                <div class="form-floating mb-4 position-relative">
                    <InputText type="password" @bind-Value="Input.OldPassword" class="form-control border-0 shadow-sm" autocomplete="current-password" aria-required="true" placeholder="Enter old password" />
                    <label for="old-password" class="form-label text-muted">
                        <i class="bi bi-key-fill me-2"></i>Old password
                    </label>
                    <ValidationMessage For="() => Input.OldPassword" class="text-danger mt-1" />
                </div>

                <div class="form-floating mb-4 position-relative">
                    <InputText type="password" @bind-Value="Input.NewPassword" class="form-control border-0 shadow-sm" autocomplete="new-password" aria-required="true" placeholder="Enter new password" />
                    <label for="new-password" class="form-label text-muted">
                        <i class="bi bi-lock-fill me-2"></i>New password
                    </label>
                    <ValidationMessage For="() => Input.NewPassword" class="text-danger mt-1" />
                </div>

                <div class="form-floating mb-4 position-relative">
                    <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control border-0 shadow-sm" autocomplete="new-password" aria-required="true" placeholder="Confirm new password" />
                    <label for="confirm-password" class="form-label text-muted">
                        <i class="bi bi-lock me-2"></i>Confirm password
                    </label>
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger mt-1" />
                </div>

                <button type="submit" class="w-100 btn btn-lg btn-primary shadow-sm" style="transition: 0.3s; font-weight: 600;">
                    <i class="bi bi-arrow-repeat me-2"></i> Update Password
                </button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private bool hasPassword;
    private bool _showOldPassword = false;
    private bool _showNewPassword = false;
    private bool _showConfirmPassword = false;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        hasPassword = await UserManager.HasPasswordAsync(user);
        if (!hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        Logger.LogInformation("User changed their password successfully.");

        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been changed", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
